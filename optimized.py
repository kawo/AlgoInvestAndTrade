import csv
import timeit
from typing import Any, Dict, List

BUDGET = 500
SHARES_FILE = "csv/shares.csv"
DATASET1 = "csv/dataset1_Python+P7.csv"
DATASET2 = "csv/dataset2_Python+P7.csv"


def csv_to_dict(file: str) -> List[Dict[str, str]]:
    """Read CSV file and convert it to list of Dict

    Args:
        file (str): const var with file url

    Returns:
        List[Dict[str, str]]: a list of Dict from CSV file
    """
    shares: List[Dict[str, str]] = []

    with open(file, newline="") as csvfile:
        shares_file = csv.DictReader(csvfile)
        for row in shares_file:
            shares.append(row)
    return shares


def append_profit_value(shares: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """Calculate and append profit value for each share

    Args:
        shares (List[Dict[str, Any]]): a list of dict with shares

    Returns:
        List[Dict[str, Any]]: the initial list with profit value in it
    """
    for share in shares:
        share["profit"] = share["profit"].replace("%", "").replace(" ", "")
        share["profit"] = int(share["profit"])
        share["cost_per_share"] = int(share["cost_per_share"])
        share["profit_value"] = share["cost_per_share"] * share["profit"]
    return shares


def dataset_to_centimes(data: List[Dict[str, Any]]):
    """Convert dataset to centimes

    Args:
        data (List[Dict[str, Any]]): dataset generated by csv_to_dict

    Returns:
        2 lists with data cost and data value
    """
    data_cost = []
    data_value = []
    for value in data:
        if (float(value["price"]) > 0) and (float(value["profit"]) > 0):
            data_cost.append(int(float(value["price"]) * 100))
            data_value.append(int(float(value["price"]) * float(value["profit"])))
    return data_cost, data_value


def knapsack(budget: int, share_cost, share_value):
    """Knapsack algorithm implementation to find the best profit

    Args:
        budget (int): the max budget (columns for the knapsack)
        share_cost (list[int]): share cost (rows for the knapsack)
        share_value (list[int]): share profit value (values for the knapsack)

    Returns:
        bag: last cell with the best profit
    """

    # First we craft the "knapsack" (bag) with the budget as columns
    # then we place goods (shares) which fit the weight (share_cost <= cell budget)
    # for each cell with the best value (share_value) and so on
    n = len(share_value)
    bag = [[0 for x in range(budget + 1)] for x in range(n + 1)]
    for i in range(n + 1):
        for j in range(budget + 1):
            if i == 0 or j == 0:
                bag[i][j] = 0
            elif share_cost[i - 1] <= j:
                bag[i][j] = max(
                    share_value[i - 1] + bag[i - 1][j - share_cost[i - 1]],
                    bag[i - 1][j],
                )
            else:
                bag[i][j] = bag[i - 1][j]
    # To retrieve the goods (shares) chosen for the best weight/value
    # we iterate in reverse from the last cell and guess if the
    # previous cell is either the result of a sum or a value
    # already calculated
    shares = []
    bag_size = budget
    bag_res = bag[n][budget]
    for i in range(n, 0, -1):
        if bag_res <= 0:
            break
        if bag_res == bag[i - 1][bag_size]:
            continue
        else:
            shares.append(share_cost[i - 1])
            bag_res = bag_res - share_value[i - 1]
            bag_size = bag_size - share_cost[i - 1]
    # At last, we return the last cell (divided by 100 because we worked in cents)
    # and the list with all chosen shares
    return bag[n][budget] / 100, shares


def dataset_results(dataset: List[Dict[str, Any]], data_profit, data_result):
    """Show dataset results

    Args:
        dataset (List[Dict[str, Any]]): dataset generated from csv_to_dict
        data_profit (List[float]): data profit from knapsack
        data_result (List[float]): data result from knapsack

    Returns:
        print total profit, total cost and actions chosen
    """
    print(f"\nProfit: {data_profit} €")
    print(f"Total cost: {sum(data_result) / 100} €")
    print("\nActions chosen:")
    for result in data_result:
        for i in range(len(dataset)):
            if (int(float(dataset[i]["price"]) * 100)) == result:
                print(f"{dataset[i]['name']} ({result / 100} €)")


def shares_time():
    SETUP_CODE = """
from __main__ import csv_to_dict
from __main__ import append_profit_value
from __main__ import knapsack
import csv
from typing import Any, Dict, List
BUDGET = 500
SHARES_FILE = "csv/shares.csv"
shares = append_profit_value(csv_to_dict(SHARES_FILE))
share_cost = []
share_value = []
for share in shares:
    share_cost.append(share["cost_per_share"])
    share_value.append(share["profit_value"])"""
    TEST_CODE = """
shares_profit, shares_result = knapsack(BUDGET, share_cost, share_value)
print("")
print(">shares.csv...")
print("")
print("Profit:", shares_profit, "€")
print("Total cost:", sum(shares_result), "€")
print("")
print("Actions chosen:")
for result in shares_result:
    for i in range(len(shares)):
        if shares[i]["cost_per_share"] == result:
            print(shares[i]['shares'], result, "€")"""

    times = timeit.timeit(stmt=TEST_CODE, setup=SETUP_CODE, number=1)

    return print(f"\n- shares calc time: {times}s -\n")


def dataset1_time():
    SETUP_CODE = """
from __main__ import csv_to_dict
from __main__ import dataset_to_centimes
from __main__ import dataset_results
from __main__ import knapsack
import csv
from typing import Any, Dict, List
BUDGET = 500
DATASET1 = "csv/dataset1_Python+P7.csv"
dataset1 = csv_to_dict(DATASET1)
dataset1_cost, dataset1_value = dataset_to_centimes(dataset1)
print(">dataset1...")"""
    TEST_CODE = """
dataset1_profit, dataset1_result = knapsack(BUDGET * 100, dataset1_cost, dataset1_value)
dataset_results(dataset1, dataset1_profit, dataset1_result)"""

    times = timeit.timeit(stmt=TEST_CODE, setup=SETUP_CODE, number=1)

    return print(f"\n- dataset1 calc time: {times}s -\n")


def dataset2_time():
    SETUP_CODE = """
from __main__ import csv_to_dict
from __main__ import dataset_to_centimes
from __main__ import dataset_results
from __main__ import knapsack
import csv
from typing import Any, Dict, List
BUDGET = 500
DATASET2 = "csv/dataset2_Python+P7.csv"
dataset2 = csv_to_dict(DATASET2)
dataset2_cost, dataset2_value = dataset_to_centimes(dataset2)
print(">dataset2...")"""
    TEST_CODE = """
dataset2_profit, dataset2_result = knapsack(BUDGET * 100, dataset2_cost, dataset2_value)
dataset_results(dataset2, dataset2_profit, dataset2_result)"""

    times = timeit.timeit(stmt=TEST_CODE, setup=SETUP_CODE, number=1)

    return print(f"\n- dataset2 calc time: {times}s -\n")


if __name__ == "__main__":

    #
    # Time calculation for knapsack algorithm on all datasets
    #
    shares_time()
    dataset1_time()
    dataset2_time()
